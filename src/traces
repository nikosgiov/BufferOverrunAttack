text:
   0x8048aac <readString>:      push   %ebp				#store old ebp
   0x8048aad <readString+1>:    mov    %esp,%ebp			#ebp = esp
   0x8048aaf <readString+3>:    sub    $0x34,%esp			#allocate space for local variables
   0x8048ab2 <readString+6>:    movl   $0x0,-0x4(%ebp)			#i=0
   0x8048ab9 <readString+13>:   mov    0x80d4b44,%eax			#copy retaddr
   0x8048abe <readString+18>:   push   %eax				#store retaddr
   0x8048abf <readString+19>:   call   0x8050850 <getc>			#fgetc(stdin)
   0x8048ac4 <readString+24>:   add    $0x4,%esp			#
   0x8048ac7 <readString+27>:   mov    %eax,-0x8(%ebp)			#c = character
   0x8048aca <readString+30>:   cmpl   $0xffffffff,-0x8(%ebp)		#if (c==EOF)
   0x8048ace <readString+34>:   je     0x8048ae8 <readString+60>	#break;
   0x8048ad0 <readString+36>:   cmpl   $0xa,-0x8(%ebp)			#if (c=='\n')
   0x8048ad4 <readString+40>:   je     0x8048ae8 <readString+60>	#break;
   0x8048ad6 <readString+42>:   mov    -0x4(%ebp),%eax			#buf[i++] = c
   0x8048ad9 <readString+45>:   lea    0x1(%eax),%edx			#-||-
   0x8048adc <readString+48>:   mov    %edx,-0x4(%ebp)			#-||-
   0x8048adf <readString+51>:   mov    -0x8(%ebp),%edx			#-||-
   0x8048ae2 <readString+54>:   mov    %dl,-0x34(%ebp,%eax,1)		#-||-
   0x8048ae6 <readString+58>:   jmp    0x8048ab9 <readString+13>	#read next character
   0x8048ae8 <readString+60>:   lea    -0x34(%ebp),%edx			#
   0x8048aeb <readString+63>:   mov    -0x4(%ebp),%eax			#eax=i
   0x8048aee <readString+66>:   add    %edx,%eax			#
   0x8048af0 <readString+68>:   movb   $0x0,(%eax)			#buf[i]=0
   0x8048af3 <readString+71>:   movl   $0x0,-0x4(%ebp)			#for (i = 0; i < BUFSIZE; i++){
   0x8048afa <readString+78>:   jmp    0x8048b15 <readString+105>	#-||-
   0x8048afc <readString+80>:   mov    -0x4(%ebp),%edx			#-||-
   0x8048aff <readString+83>:   mov    0x8(%ebp),%eax			#-||-
   0x8048b02 <readString+86>:   add    %eax,%edx			#-||-
   0x8048b04 <readString+88>:   lea    -0x34(%ebp),%ecx			#-||-
   0x8048b07 <readString+91>:   mov    -0x4(%ebp),%eax			#-||-
   0x8048b0a <readString+94>:   add    %ecx,%eax			#-||-
   0x8048b0c <readString+96>:   movzbl (%eax),%eax			#s[i]=buf[i]
   0x8048b0f <readString+99>:   mov    %al,(%edx)			#-||-
   0x8048b11 <readString+101>:  addl   $0x1,-0x4(%ebp)			#-||-
   0x8048b15 <readString+105>:  cmpl   $0x2b,-0x4(%ebp)			#-||-
   0x8048b19 <readString+109>:  jle    0x8048afc <readString+80>	#}
   0x8048b1b <readString+111>:  nop					#
   0x8048b1c <readString+112>:  leave					#return
   0x8048b1d <readString+113>:  ret					#

data:
(gdb) print &grade
$1 = 0x80d46e8 <grade> "3"
(gdb) print grade
$2 = 51 '3'

bss:
$5 = (char (*)[44]) 0x80d65e0 <Name>

stack-frame:
(gdb) print $esp
$1 = (void *) 0xbffff538
(gdb) print $ebp
$2 = (void *) 0xbffff56c

ebp - esp = 0xbffff56c - 0xbffff538 = 34(hex)=52 (dec) Ara:
(gdb) x/52b $esp
0xbffff538:     110     105     107     0       -88     -80     10      8
0xbffff540:     127     -15     4       8       -128    72      13      8
0xbffff548:     10      0       0       0       18      0       0       0
0xbffff550:     1       0       0       0       4       -10     -1      -65
0xbffff558:     12      -10     -1      -65     1       0       0       0
0xbffff560:     52      -128    4       8       10      0       0       0
0xbffff568:     3       0       0       0
(gdb)